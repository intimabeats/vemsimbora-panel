// vite.config.ts
import { defineConfig, loadEnv } from "file:///home/project/node_modules/vite/dist/node/index.js";
import react from "file:///home/project/node_modules/@vitejs/plugin-react/dist/index.mjs";
import * as Sentry from "file:///home/project/node_modules/@sentry/vite-plugin/dist/esm/index.mjs";
import envPlugin from "file:///home/project/node_modules/vite-plugin-environment/dist/index.js";
var vite_config_default = defineConfig(({ mode }) => {
  const env = loadEnv(mode, process.cwd(), "");
  return {
    plugins: [
      react(),
      // Expondo SOMENTE as variáveis necessárias
      envPlugin([
        "VITE_FIREBASE_API_KEY",
        "VITE_FIREBASE_AUTH_DOMAIN",
        "VITE_FIREBASE_PROJECT_ID",
        "VITE_FIREBASE_STORAGE_BUCKET",
        "VITE_FIREBASE_MESSAGING_SENDER_ID",
        "VITE_FIREBASE_APP_ID",
        "VITE_FIREBASE_MEASUREMENT_ID",
        "VITE_SENTRY_DSN",
        "VITE_APP_ENV",
        "SENTRY_AUTH_TOKEN"
      ]),
      Sentry.sentryVitePlugin({
        org: "vemsimbora",
        // Verifique se esse é o nome correto da organização
        project: "vemsimbora",
        // Verifique se esse é o nome correto do projeto
        authToken: env.SENTRY_AUTH_TOKEN,
        release: {
          name: env.VITE_SENTRY_RELEASE || "default-release",
          inject: true
        }
      })
    ],
    server: {
      port: 3e3,
      open: true,
      cors: true
    },
    preview: {
      port: 8080
    },
    build: {
      outDir: "dist",
      sourcemap: true
    },
    test: {
      globals: true,
      environment: "jsdom",
      setupFiles: ["./src/test/setup.ts"],
      coverage: {
        provider: "v8",
        reporter: ["text", "json", "html"]
      }
    },
    resolve: {
      alias: {
        "@": "/src"
      }
    }
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCIvaG9tZS9wcm9qZWN0XCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvaG9tZS9wcm9qZWN0L3ZpdGUuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9ob21lL3Byb2plY3Qvdml0ZS5jb25maWcudHNcIjtpbXBvcnQgeyBkZWZpbmVDb25maWcsIGxvYWRFbnYgfSBmcm9tICd2aXRlJ1xuaW1wb3J0IHJlYWN0IGZyb20gJ0B2aXRlanMvcGx1Z2luLXJlYWN0J1xuaW1wb3J0ICogYXMgU2VudHJ5IGZyb20gXCJAc2VudHJ5L3ZpdGUtcGx1Z2luXCJcbmltcG9ydCBlbnZQbHVnaW4gZnJvbSAndml0ZS1wbHVnaW4tZW52aXJvbm1lbnQnXG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZygoeyBtb2RlIH0pID0+IHtcbiAgLy8gQ2FycmVnYXIgdmFyaVx1MDBFMXZlaXMgZGUgYW1iaWVudGUgZG8gLmVudlxuICBjb25zdCBlbnYgPSBsb2FkRW52KG1vZGUsIHByb2Nlc3MuY3dkKCksICcnKVxuXG4gIHJldHVybiB7XG4gICAgcGx1Z2luczogW1xuICAgICAgcmVhY3QoKSxcbiAgICAgIC8vIEV4cG9uZG8gU09NRU5URSBhcyB2YXJpXHUwMEUxdmVpcyBuZWNlc3NcdTAwRTFyaWFzXG4gICAgICBlbnZQbHVnaW4oW1xuICAgICAgICAnVklURV9GSVJFQkFTRV9BUElfS0VZJyxcbiAgICAgICAgJ1ZJVEVfRklSRUJBU0VfQVVUSF9ET01BSU4nLFxuICAgICAgICAnVklURV9GSVJFQkFTRV9QUk9KRUNUX0lEJyxcbiAgICAgICAgJ1ZJVEVfRklSRUJBU0VfU1RPUkFHRV9CVUNLRVQnLFxuICAgICAgICAnVklURV9GSVJFQkFTRV9NRVNTQUdJTkdfU0VOREVSX0lEJyxcbiAgICAgICAgJ1ZJVEVfRklSRUJBU0VfQVBQX0lEJyxcbiAgICAgICAgJ1ZJVEVfRklSRUJBU0VfTUVBU1VSRU1FTlRfSUQnLFxuICAgICAgICAnVklURV9TRU5UUllfRFNOJyxcbiAgICAgICAgJ1ZJVEVfQVBQX0VOVicsXG4gICAgICAgICdTRU5UUllfQVVUSF9UT0tFTidcbiAgICAgIF0pLFxuICAgICAgU2VudHJ5LnNlbnRyeVZpdGVQbHVnaW4oe1xuICAgICAgICBvcmc6IFwidmVtc2ltYm9yYVwiLCAgICAgICAgICAvLyBWZXJpZmlxdWUgc2UgZXNzZSBcdTAwRTkgbyBub21lIGNvcnJldG8gZGEgb3JnYW5pemFcdTAwRTdcdTAwRTNvXG4gICAgICAgIHByb2plY3Q6IFwidmVtc2ltYm9yYVwiLCAvLyBWZXJpZmlxdWUgc2UgZXNzZSBcdTAwRTkgbyBub21lIGNvcnJldG8gZG8gcHJvamV0b1xuICAgICAgICBhdXRoVG9rZW46IGVudi5TRU5UUllfQVVUSF9UT0tFTixcbiAgICAgICAgcmVsZWFzZToge1xuICAgICAgICAgIG5hbWU6IGVudi5WSVRFX1NFTlRSWV9SRUxFQVNFIHx8IFwiZGVmYXVsdC1yZWxlYXNlXCIsXG4gICAgICAgICAgaW5qZWN0OiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgXSxcbiAgICBzZXJ2ZXI6IHtcbiAgICAgIHBvcnQ6IDMwMDAsXG4gICAgICBvcGVuOiB0cnVlLFxuICAgICAgY29yczogdHJ1ZVxuICAgIH0sXG4gICAgcHJldmlldzoge1xuICAgICAgcG9ydDogODA4MFxuICAgIH0sXG4gICAgYnVpbGQ6IHtcbiAgICAgIG91dERpcjogJ2Rpc3QnLFxuICAgICAgc291cmNlbWFwOiB0cnVlLFxuICAgIH0sXG4gICAgdGVzdDoge1xuICAgICAgZ2xvYmFsczogdHJ1ZSxcbiAgICAgIGVudmlyb25tZW50OiAnanNkb20nLFxuICAgICAgc2V0dXBGaWxlczogWycuL3NyYy90ZXN0L3NldHVwLnRzJ10sXG4gICAgICBjb3ZlcmFnZToge1xuICAgICAgICBwcm92aWRlcjogJ3Y4JyxcbiAgICAgICAgcmVwb3J0ZXI6IFsndGV4dCcsICdqc29uJywgJ2h0bWwnXVxuICAgICAgfVxuICAgIH0sXG4gICAgcmVzb2x2ZToge1xuICAgICAgYWxpYXM6IHtcbiAgICAgICAgJ0AnOiAnL3NyYydcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pXG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQXlOLFNBQVMsY0FBYyxlQUFlO0FBQy9QLE9BQU8sV0FBVztBQUNsQixZQUFZLFlBQVk7QUFDeEIsT0FBTyxlQUFlO0FBRXRCLElBQU8sc0JBQVEsYUFBYSxDQUFDLEVBQUUsS0FBSyxNQUFNO0FBRXhDLFFBQU0sTUFBTSxRQUFRLE1BQU0sUUFBUSxJQUFJLEdBQUcsRUFBRTtBQUUzQyxTQUFPO0FBQUEsSUFDTCxTQUFTO0FBQUEsTUFDUCxNQUFNO0FBQUE7QUFBQSxNQUVOLFVBQVU7QUFBQSxRQUNSO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsTUFDRixDQUFDO0FBQUEsTUFDTSx3QkFBaUI7QUFBQSxRQUN0QixLQUFLO0FBQUE7QUFBQSxRQUNMLFNBQVM7QUFBQTtBQUFBLFFBQ1QsV0FBVyxJQUFJO0FBQUEsUUFDZixTQUFTO0FBQUEsVUFDUCxNQUFNLElBQUksdUJBQXVCO0FBQUEsVUFDakMsUUFBUTtBQUFBLFFBQ1Y7QUFBQSxNQUNGLENBQUM7QUFBQSxJQUNIO0FBQUEsSUFDQSxRQUFRO0FBQUEsTUFDTixNQUFNO0FBQUEsTUFDTixNQUFNO0FBQUEsTUFDTixNQUFNO0FBQUEsSUFDUjtBQUFBLElBQ0EsU0FBUztBQUFBLE1BQ1AsTUFBTTtBQUFBLElBQ1I7QUFBQSxJQUNBLE9BQU87QUFBQSxNQUNMLFFBQVE7QUFBQSxNQUNSLFdBQVc7QUFBQSxJQUNiO0FBQUEsSUFDQSxNQUFNO0FBQUEsTUFDSixTQUFTO0FBQUEsTUFDVCxhQUFhO0FBQUEsTUFDYixZQUFZLENBQUMscUJBQXFCO0FBQUEsTUFDbEMsVUFBVTtBQUFBLFFBQ1IsVUFBVTtBQUFBLFFBQ1YsVUFBVSxDQUFDLFFBQVEsUUFBUSxNQUFNO0FBQUEsTUFDbkM7QUFBQSxJQUNGO0FBQUEsSUFDQSxTQUFTO0FBQUEsTUFDUCxPQUFPO0FBQUEsUUFDTCxLQUFLO0FBQUEsTUFDUDtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBQ0YsQ0FBQzsiLAogICJuYW1lcyI6IFtdCn0K
